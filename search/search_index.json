{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dotsec","text":"<p>consider the contents of this file a work in progress, and not yet ready for consumption For now see --help for more information</p>"},{"location":"#installation","title":"Installation","text":"<p>With AWS support:</p> <pre><code>npm install --save dotsec @dotsec/plugin-aws\nnpx dotsec --plugin @dotsec/plugin-aws aws init\n</code></pre> <p>With PKE support:</p> <pre><code>npm install --save dotsec @dotsec/plugin-pke\nnpx dotsec --plugin @dotsec/plugin-pke pke init\nnpx dotsec pke create-keypair\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>npx dotsec --help\n</code></pre>"},{"location":"commands/decrypt/","title":"decrypt","text":""},{"location":"commands/decrypt/#usage","title":"Usage","text":"<p>Decrypts an encrypted sec file to a plaintext env file</p> <pre><code>npx dotsec decrypt\n</code></pre> <p>Specify a different encrypted sec file</p> <pre><code>npx dotsec decrypt --sec-file .sec.dev\nSEC_FILE=.sec.dev npx dotsec decrypt\n</code></pre> <p>Specify a different plaintext env file</p> <pre><code>npx dotsec decrypt --env-file .env.dev\nENV_FILE=.env.dev npx dotsec decrypt\n</code></pre> <p>Write a manifest markdown file</p> <pre><code>npx dotsec decrypt --create-manifest\nCREATE_MANIFEST=true npx dotsec decrypt\n</code></pre> <p>Specify a different manifest file</p> <pre><code>npx dotsec decrypt --manifest-file .manifest.dev\nMANIFEST_FILE=decryption-manifest.md npx dotsec decrypt\n</code></pre>"},{"location":"commands/decrypt/#config-file","title":"Config file","text":"<p>See the config file reference for more information on how to configure this command.</p>"},{"location":"commands/encrypt/","title":"encrypt","text":""},{"location":"commands/encrypt/#usage","title":"Usage","text":"<p>Encrypts a plaintext env file to an encrypted sec file</p> <pre><code>npx dotsec decrypt\n\nSpecify a different plaintext env file\n\n```sh\nnpx dotsec encrypt --env-file .env.dev\nENV_FILE=.env.dev npx dotsec encrypt\n</code></pre> <p>Specify a different encrypt sec file</p> <pre><code>npx dotsec encrypt --sec-file .sec.dev\nSEC_FILE=.sec.dev npx dotsec encrypt\n</code></pre> <p>Write a manifest file</p> <pre><code>npx dotsec encrypt --create-manifest\nCREATE_MANIFEST=true npx dotsec encrypt\n</code></pre> <p>Specify a different manifest file</p> <pre><code>npx dotsec encrypt --manifest-file manifest.dev\nMANIFEST_FILE=encryption-manifest.md npx dotsec encrypt\n</code></pre>"},{"location":"commands/encrypt/#config-file","title":"Config file","text":"<p>See the config file reference for more information on how to configure this command.</p>"},{"location":"commands/init/","title":"init","text":""},{"location":"commands/init/#usage","title":"Usage","text":"<p>Create a dotsec.config.ts file in the current directory</p> <pre><code>npx dotsec init\n</code></pre> <p>Overwrite an existing dotsec.config.ts file in the current directory</p> <pre><code>npx dotsec init --yes\n</code></pre> <p>Create a dotsec config file in the current directory with a specific config file name</p> <p>By specifying the --config-file option, you can create a dotsec config file with a specific name.</p> <pre><code>npx dotsec init --config-file dotsec.config.ts\n</code></pre> <pre><code>DOTSEC_CONFIG_FILE=my.config.ts npx dotsec init\n</code></pre>"},{"location":"commands/push/","title":"push","text":"<p>Pushes variables from a plaintext env or an encrypted sec file to a remote</p>"},{"location":"commands/push/#usage","title":"Usage","text":"<pre><code>npx dotsec push --using env\nDOTSEC_USING=env npx dotsec push\n</code></pre> <p>Push variables from .sec file to remote</p> <pre><code>npx dotsec push --using sec\nDOTSEC_USING=sec npx dotsec push\n</code></pre>"},{"location":"commands/run/","title":"run","text":"<p>Without encryption plugins this command will only inject .env variables into the environment. If you want to use encryption plugins, you need to install them first, please see the plugins section for more information.</p> <pre><code>## Without encryption plugins\n\n```sh\nnpx dotsec run --using env {your command}\n</code></pre>"},{"location":"commands/run/#with-encryption-plugins","title":"With encryption plugins","text":"<p>Run a command with a <code>.sec</code> file</p> <pre><code>npx dotsec run --using sec {your command}\n</code></pre> <p>If you'd like to specify a specific <code>.sec</code> file, you can use the <code>--sec-file</code> option</p> <pre><code>npx dotsec run --using sec --sec-file .sec {your command}\n</code></pre> <p>or, you can specify the <code>SEC_FILE</code> environment variable</p> <pre><code>SEC_FILE=.sec npx dotsec run --using sec {your command}\n</code></pre>"},{"location":"commands/run/#without-encryption-plugins","title":"Without encryption plugins","text":"<p>Run a command with a <code>.env</code> file</p> <pre><code>npx dotsec run --using env node -e \\\"console.log(process.env)\\\"\n</code></pre> <p>Run a command with a specific <code>.env</code> file</p> <pre><code>npx dotsec run --using env --env-file .env node -e \\\"console.log(process.env)\\\"\n</code></pre> <p>Run a command with a specific <code>ENV_FILE</code> variable</p> <pre><code>ENV_FILE=.env.dev npx dotsec run --using env node -e \\\"console.log(process.env)\\\"\n</code></pre> <pre><code>You can also specify 'using' as an environment variable\n\n```sh\nDOTSEC_USING=env npx dotsec run node -e \\\"console.log(process.env)\\\"\n</code></pre>"},{"location":"commands/run/#output-options","title":"Output options","text":""},{"location":"commands/run/#redaction","title":"Redaction","text":"<p>By default - and design - the output of the command will be redacted. You can disable this behavior in a couple of ways:</p> <ul> <li>By making exceptions for specific variables in the config file. Adding env var names to the <code>redaction.show</code> array will prevent them from being redacted if redaction is enabled.</li> <li>By disabling redaction:</li> <li>On the command line using the <code>--show-redacted</code> option:</li> <li>By setting the <code>DOTSEC_SHOW_REDACTED</code> environment variable to <code>true</code></li> <li>By setting the <code>defaults.options.showRedacted</code> config option to <code>true</code></li> </ul>"},{"location":"commands/run/#show-output-background-color","title":"Show output background color","text":"<p>If you'd like to highlight the output of the <code>run</code> to signal that its <code>env</code> or <code>sec</code> variables are injected, you can do so in a couple of ways:</p> <ul> <li>On the command line using the <code>--show-output-background-color</code> flag</li> <li>By setting the <code>DOTSEC_SHOW_OUTPUT_BACKGROUND_COLOR</code> environment variable to <code>true</code></li> <li>By setting the <code>defaults.options.showOutputBackgroundColor</code> config option to <code>true</code></li> </ul>"},{"location":"commands/run/#using-the-show-output-background-color-flag","title":"Using the <code>--show-output-background-color</code> flag","text":"<pre><code>npx dotsec run --show-output-background-color {your command}\n</code></pre>"},{"location":"commands/run/#using-the-dotsec_show_output_background_color-environment-variable","title":"Using the <code>DOTSEC_SHOW_OUTPUT_BACKGROUND_COLOR</code> environment variable","text":"<pre><code>DOTSEC_SHOW_OUTPUT_BACKGROUND_COLOR=true npx dotsec run {your command}\n</code></pre>"},{"location":"commands/run/#using-the-defaultsoptionsshowoutputbackgroundcolor-config-option","title":"Using the <code>defaults.options.showOutputBackgroundColor</code> config option","text":"<pre><code>{\n  defaults: {\n    options: {\n      showOutputBackgroundColor: true;\n    }\n  }\n}\n</code></pre>"},{"location":"commands/run/#use-a-custom-output-background-color","title":"Use a custom output background color","text":"<p>By default, the background color is set to <code>red-bright</code>, however, the following colors from the excellent chalk package are supported:</p> <ul> <li>black</li> <li>red</li> <li>green</li> <li>yellow</li> <li>blue</li> <li>magenta</li> <li>cyan</li> <li>white</li> <li>black-bright, (alias: gray, grey)</li> <li>red-bright</li> <li>green-bright</li> <li>yellow-bright</li> <li>blue-bright</li> <li>magenta-bright</li> <li>cyan-bright</li> <li>white-bright</li> </ul> <p>Setting a different background color can be achieved in a couple of ways:</p> <ul> <li>On the command line using the <code>--output-background-color</code> flag</li> <li>By setting the <code>DOTSEC_OUTPUT_BACKGROUND_COLOR</code> environment variable to a supported color</li> <li>By setting the <code>defaults.options.outputBackgroundColor</code> config option to a supported color</li> </ul>"},{"location":"commands/run/#using-the-output-background-color-flag","title":"Using the <code>--output-background-color</code> flag","text":"<pre><code>npx dotsec run --output-background-color blue {your command}\n</code></pre>"},{"location":"commands/run/#using-the-dotsec_output_background_color-environment-variable","title":"Using the <code>DOTSEC_OUTPUT_BACKGROUND_COLOR</code> environment variable","text":"<pre><code>DOTSEC_OUTPUT_BACKGROUND_COLOR=blue npx dotsec run {your command}\n</code></pre>"},{"location":"commands/run/#using-the-defaultsoptionsoutputbackgroundcolor-config-option","title":"Using the <code>defaults.options.outputBackgroundColor</code> config option","text":"<pre><code>{\n  defaults: {\n    options: {\n      outputBackgroundColor: \"blue\";\n    }\n  }\n}\n</code></pre>"},{"location":"commands/run/#config-file","title":"Config file","text":"<p>See the config file reference for more information on how to configure this command.</p>"},{"location":"guides/multiple-environments/","title":"How to use multiple .sec files in a monorepo","text":""},{"location":"guides/multiple-environments/#problem","title":"Problem","text":"<p>You have a monorepo with one codebase for multiple environments, each having their own <code>.sec</code> file.</p>"},{"location":"guides/multiple-environments/#specify-sec_file-value-before-running-dotsec","title":"Specify <code>SEC_FILE</code> value before running <code>dotsec</code>","text":"<pre><code>SEC_FILE=.sec.test npx dotsec run --using sec {your command}\n</code></pre>"},{"location":"guides/multiple-environments/#export-sec_file-and-env_file-variables","title":"Export <code>SEC_FILE</code> and <code>ENV_FILE</code> variables","text":"<pre><code>export SEC_FILE=.sec.test\nexport ENV_FILE=.env.test\n</code></pre> <p>Validate if the variables are set correctly:</p> <pre><code>npx dotsec run --using sec env | grep -e SEC_FILE -e ENV_FILE\n</code></pre> <p>If the variables are set correctly, you should see the following output:</p> <pre><code>SEC_FILE=.sec.test\nENV_FILE=.env.test\n</code></pre> <p>After which you run your command:</p> <pre><code>npx dotsec run --using sec {your command}\n</code></pre>"},{"location":"guides/multiple-environments/#adding-the-sec_file-and-env_file-variables-to-your-zshenv-or-bash_profile","title":"Adding the <code>SEC_FILE</code> and <code>ENV_FILE</code> variables to your <code>.zshenv</code> or <code>.bash_profile</code>","text":"<p>Add the following to your <code>.zshenv</code> or <code>.bash_profile</code>:</p> <pre><code>export SEC_FILE=.sec.test\nexport ENV_FILE=.env.test\n</code></pre> <p>Validate if the variables are set correctly:</p> <pre><code>npx dotsec run --using sec env | grep -e SEC_FILE -e ENV_FILE\n</code></pre> <p>If the variables are set correctly, you should see the following output:</p> <pre><code>SEC_FILE=.sec.test\nENV_FILE=.env.test\n</code></pre> <p>If that did not work, try running <code>source ~/.zshenv</code> or <code>source ~/.bash_profile</code></p> <p>Then run the following command:</p> <pre><code>npx dotsec run --using sec {your command}\n</code></pre>"},{"location":"plugins/aws/","title":"@dotsec/plugin-aws","text":""},{"location":"plugins/aws/#requirements","title":"Requirements","text":"<ul> <li>AWS CLI</li> <li>AWS credentials configured with the following permissions:</li> <li><code>kms:CreateKey</code></li> <li><code>kms:CreateAlias</code></li> <li><code>kms:Encrypt</code></li> <li><code>kms:Decrypt</code></li> <li><code>kms:DescribeKey</code></li> <li><code>kms:ListAliases</code></li> <li> <p><code>kms:ListKeys</code></p> </li> <li> <p>Permissions needed for SSM Parameter Store:</p> </li> <li><code>ssm:GetParameter</code></li> <li><code>ssm:GetParameters</code></li> <li><code>ssm:PutParameter</code></li> <li> <p><code>ssm:DeleteParameter</code></p> </li> <li> <p>Permissions needed for Secrets Manager:</p> </li> <li><code>secretsmanager:CreateSecret</code></li> <li><code>secretsmanager:DeleteSecret</code></li> <li><code>secretsmanager:GetSecretValue</code></li> <li><code>secretsmanager:ListSecrets</code></li> <li><code>secretsmanager:PutSecretValue</code></li> </ul> <p>TODO: validate permissions</p>"},{"location":"plugins/aws/#installation","title":"Installation","text":"<pre><code>npm install dotsec @dotsec/plugin-aws\n</code></pre>"},{"location":"plugins/aws/#create-dotsecconfigts","title":"Create <code>dotsec.config.ts</code>","text":"<pre><code>npx dotsec --plugin @dotsec/plugin-aws aws init\n</code></pre>"},{"location":"plugins/aws/#create-a-kms-key-and-alias","title":"Create a KMS key and alias","text":"<p>If you don't have an AWS KMS key with an alias, you can create one with the following command:</p> <pre><code>aws kms create-key --description \"Dotsec key\" --region eu-west-1\n</code></pre> <p>Take not of the <code>KeyMetadata.KeyId</code> value, and create an alias for it:</p> <p>Note: You are free to pick any allowed alias name, just make sure to specify the alias in one of the following:</p> <ul> <li><code>dotsec.config.ts</code> &gt; <code>defaults.plugins.aws.kms.keyAlias</code></li> <li><code>--aws-key-alias</code> option</li> <li><code>AWS_KMS_KEY_ALIAS</code> environment variable</li> </ul> <pre><code>aws kms create-alias --alias-name alias/dotsec --target-key-id &lt;key-id&gt;\n</code></pre>"},{"location":"plugins/aws/#encrypt-a-env-file-to-sec","title":"Encrypt a <code>.env</code> file to <code>.sec</code>","text":"<pre><code>npx dotsec encrypt\n</code></pre>"},{"location":"plugins/aws/#decrypt-a-sec-file-toenv","title":"Decrypt a <code>.sec</code> file to<code>.env</code>","text":"<pre><code>npx dotsec decrypt\n</code></pre>"},{"location":"plugins/aws/#commands","title":"Commands","text":""},{"location":"plugins/aws/#init","title":"init","text":"<pre><code>npx dotsec --plugin @dotsec/plugin-aws aws init\n</code></pre>"},{"location":"plugins/pke/","title":"@dotsec/plugin-pke","text":"<p>This plugin provides public key encryption (PKE) for the <code>dotsec</code> CLI.</p>"},{"location":"plugins/pke/#how-it-works","title":"How it works","text":"<p>We will encrypt our <code>.env</code> file with a public key. The encrypted file will be saved as <code>.sec</code>. We can then decrypt the <code>.sec</code> file with a private key. The decrypted file will be saved as <code>.env</code>.</p> <p>Since the <code>.env</code> file will be encrypted with a public key, you can share it with anyone who has the private key. This is useful for sharing secrets with a CI/CD pipeline. You can also use the private key to decrypt the <code>.sec</code> file locally. In other words, it is safe to commit the <code>.sec</code> file to your repository, together with the public key. However, you should never commit the <code>.env</code> file to your repository, nor the private key.</p>"},{"location":"plugins/pke/#installation","title":"Installation","text":"<pre><code>npm install dotsec @dotsec/plugin-pke\n</code></pre>"},{"location":"plugins/pke/#create-dotsecconfigts","title":"Create <code>dotsec.config.ts</code>","text":"<pre><code>npx dotsec --plugin @dotsec/plugin-pke pke init\n</code></pre>"},{"location":"plugins/pke/#create-a-keypair","title":"Create a keypair","text":"<pre><code>npx dotsec pke create-keypair\n</code></pre>"},{"location":"plugins/pke/#add-env-and-dotsec-privatepem-to-gitignore","title":"Add <code>.env</code> and <code>dotsec-private.pem</code> to <code>.gitignore</code>","text":"<pre><code>echo '.env' &gt;&gt; .gitignore\necho 'dotsec-private.pem' &gt;&gt; .gitignore\n</code></pre>"},{"location":"plugins/pke/#encrypt-a-env-file-to-sec","title":"Encrypt a <code>.env</code> file to <code>.sec</code>","text":"<pre><code>npx dotsec encrypt\n</code></pre>"},{"location":"plugins/pke/#decrypt-a-sec-file-toenv","title":"Decrypt a <code>.sec</code> file to<code>.env</code>","text":"<pre><code>npx dotsec decrypt\n</code></pre>"},{"location":"plugins/aws/","title":"@dotsec/plugin-aws","text":""},{"location":"plugins/aws/#requirements","title":"Requirements","text":"<ul> <li>AWS CLI</li> <li>AWS credentials configured with the following permissions:</li> <li><code>kms:CreateKey</code></li> <li><code>kms:CreateAlias</code></li> <li><code>kms:Encrypt</code></li> <li><code>kms:Decrypt</code></li> <li><code>kms:DescribeKey</code></li> <li><code>kms:ListAliases</code></li> <li> <p><code>kms:ListKeys</code></p> </li> <li> <p>Permissions needed for SSM Parameter Store:</p> </li> <li><code>ssm:GetParameter</code></li> <li><code>ssm:GetParameters</code></li> <li><code>ssm:PutParameter</code></li> <li> <p><code>ssm:DeleteParameter</code></p> </li> <li> <p>Permissions needed for Secrets Manager:</p> </li> <li><code>secretsmanager:CreateSecret</code></li> <li><code>secretsmanager:DeleteSecret</code></li> <li><code>secretsmanager:GetSecretValue</code></li> <li><code>secretsmanager:ListSecrets</code></li> <li><code>secretsmanager:PutSecretValue</code></li> </ul> <p>TODO: validate permissions</p>"},{"location":"plugins/aws/#installation","title":"Installation","text":"<pre><code>npm install dotsec @dotsec/plugin-aws\n</code></pre>"},{"location":"plugins/aws/#create-dotsecconfigts","title":"Create <code>dotsec.config.ts</code>","text":"<pre><code>npx dotsec --plugin @dotsec/plugin-aws aws init\n</code></pre>"},{"location":"plugins/aws/#create-a-kms-key-and-alias","title":"Create a KMS key and alias","text":"<p>If you don't have an AWS KMS key with an alias, you can create one with the following command:</p> <pre><code>aws kms create-key --description \"Dotsec key\" --region eu-west-1\n</code></pre> <p>Take not of the <code>KeyMetadata.KeyId</code> value, and create an alias for it:</p> <p>Note: You are free to pick any allowed alias name, just make sure to specify the alias in one of the following:</p> <ul> <li><code>dotsec.config.ts</code> &gt; <code>defaults.plugins.aws.kms.keyAlias</code></li> <li><code>--aws-key-alias</code> option</li> <li><code>AWS_KMS_KEY_ALIAS</code> environment variable</li> </ul> <pre><code>aws kms create-alias --alias-name alias/dotsec --target-key-id &lt;key-id&gt;\n</code></pre>"},{"location":"plugins/aws/#encrypt-a-env-file-to-sec","title":"Encrypt a <code>.env</code> file to <code>.sec</code>","text":"<pre><code>npx dotsec encrypt\n</code></pre>"},{"location":"plugins/aws/#decrypt-a-sec-file-toenv","title":"Decrypt a <code>.sec</code> file to<code>.env</code>","text":"<pre><code>npx dotsec decrypt\n</code></pre>"},{"location":"plugins/aws/#commands","title":"Commands","text":""},{"location":"plugins/aws/#init","title":"init","text":"<pre><code>npx dotsec --plugin @dotsec/plugin-aws aws init\n</code></pre>"},{"location":"plugins/aws/commands/init/","title":"init","text":""},{"location":"plugins/aws/commands/init/#usage","title":"Usage","text":"<p>Create a dotsec.config.ts file in the current directory</p> <pre><code>npx dotsec aws init\n</code></pre> <p>Overwrite an existing dotsec.config.ts file in the current directory</p> <pre><code>npx dotsec aws init --yes\n</code></pre> <p>Create a dotsec config file in the current directory with a specific config file name</p> <p>By specifying the --config-file option, you can create a dotsec config file with a specific name.</p> <pre><code>npx dotsec aws init --config-file dotsec.config.ts\n</code></pre> <pre><code>DOTSEC_CONFIG_FILE=my.config.ts npx dotsec aws init\n</code></pre>"},{"location":"reference/config/","title":"config","text":""},{"location":"reference/config/#usage","title":"Usage","text":"<p>Create a dotsec.config.ts file in the current directory</p> <pre><code>import type { DotsecConfig } from \"dotsec\";\n\nexport const dotsec: DotsecConfig = {\n    defaults: {\n        options: {\n            // Specify the .env file to use\n            envFile: \".env\",\n\n            // Specify the .sec file to use\n            secFile: \".sec\",\n\n            // Create encryption/decryption manifest file\n            createManifest: true,\n\n            /**\n             * Setting this option to true will cause send env or sec variable values to stdout.\n             * By default, this is disabled.\n             */\n            showRedacted: true,\n\n            /**\n             * Show output background color\n             *\n             * If set to true, the default output color will be used,\n             * or you can specify one of the following:\n             *\n             *  \"black\",\n             *  \"red\",\n             *  \"green\",\n             *  \"yellow\",\n             *  \"blue\",\n             *  \"magenta\",\n             *  \"cyan\",\n             *  \"white\",\n             *  \"black-bright\",\n             *  \"gray\",\n             *  \"grey\",\n             *  \"red-bright\",\n             *  \"green-bright\",\n             *  \"yellow-bright\",\n             *  \"blue-bright\",\n             *  \"magenta-bright\",\n             *  \"cyan-bright\",\n             *  \"white-bright\"\n             */\n            outputBackgroundColor: true | BackgroundColor,\n        },\n    },\n\n    /**\n     * This is where you can make exceptions for showing\n     * specific env or sec variable values.\n     */\n    redaction?: {\n        show: string[]\n    }\n};\n</code></pre>"}]}